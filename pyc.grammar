<?xml version="1.0" encoding="UTF-8"?>
<ufwb version="1.5.1">
    <grammar name="Python Bytecode" start="id:313" author="AndrÃ© Berg" email="andre.bergmedia@googlemail.com" fileextension="pyc,pyo" complete="yes">
        <description>Grammar for PYC and PYO files
Version: 8

Now works with pyc/pyo files generated by Python 2, Python 3.0-3.2 and Python 3.3.

References

http://daeken.com/2010-02-20_Python_Marshal_Format.html

http://nedbatchelder.com/blog/200804/the_structure_of_pyc_files.html

See also: marshal.c, longobject.c, ceval.c and _bootstrap.py from Python source</description>
        <scripts>
            <script name="Timestamp" type="DataType" id="43">
                <description>Parse header timestamp, which is a 4 byte little endian value starting at offset 4.</description>
                <source language="Python"># Data type script for displaying and manipulating the 
# timestamp header bytes in a Python bytcode (pyc) file.
#
# pyc header
#                 8                16
# +-+-+-+-+-+-+-+-+ +-+-+-+-+-+-+-+-+ 
# |X|X|X|X|0|D|0|A| |T|I|M|E|S|T|M|P|
# +-+-+-+-+-+-+-+-+ +-+-+-+-+-+-+-+-+ 
#  \______/\______/ \_______________/
#    inc.    cr/lf      timestamp
# 
# Author: Andre Berg
# 
# You can change the TIME_FORMAT constant below to the 
# format you are most comfortable with. By default it 
# will use an ISO-8601 date time format.
# 

import time, struct
import datetime

ASCTIME_FORMAT = &quot;%a %b  %d %H:%M:%S %Y&quot;
ISODATE_FORMAT = &quot;%Y-%m-%d %H:%M:%S&quot;
TIME_FORMAT = ISODATE_FORMAT

def parseByteRange(element, byteView, bitPos, bitLength, results):
    # this method parses data starting at bitPos, bitLength bits are remaining
    &quot;&quot;&quot;parseByteRange method&quot;&quot;&quot;

    tsBytes = byteView.readUnsignedInt(bitPos//8, 4, ENDIAN_LITTLE)
    stamp = str(time.strftime(TIME_FORMAT, time.localtime(tsBytes)))

    # create and set new value
    value = Value()
    value.setString(stamp)

    # how many bytes were processed?
    processedBytes = 4
    iteration = 0

    results.addElement(element, processedBytes, iteration, value)

    # return number of processed bytes
    return processedBytes

def fillByteRange(value, byteArray, bitPos, bitLength):
    # this method translates edited values back to the file
    &quot;&quot;&quot;fillByteRange method&quot;&quot;&quot;
    
    editedString = value.getString()
    newStamp = int(time.mktime(time.strptime(editedString, TIME_FORMAT)))
    newBytes = struct.pack('I', newStamp)
    
    # write an integer back to file
    byteArray.fillRange(bitPos//8, 4, newBytes)
</source>
            </script>
            <script name="LongObjectValue" type="DataType" id="528">
                <description>Interpret value part of Python's long integer representation (PyLong objects). See longintrepr.h, longint.c and longint.h in Python's source code.</description>
                <source language="Python"># Data type script for interpreting the value part 
# of Python's long integer object representation. 
#
# Serialization of PyLong objects to marshal's bytecode 
# format has the following layout:
#
#   +--+--+--+--+--+--+--+--+--+ 
#   |6C|XX|XX|XX|XX|NN| ... |NN|
#   +--+--+--+--+--+--+--+--+--+ 
#   \_/ \_________/ \_________/
#    l     size      digit arr.
#
# The size determines the length of the variable digit array portion.
# It is exactly size * 2 bytes long. 
#
#  Python's long objects are packed structures representings
#  arbitrary size integers. In the source code these are represented
#  by PyLong objects which have a size and an array of digits
#  that get de- and reconstructed by some trickery with shifting 
#  operations.
#  
#  marshal.c then does some additional trickery to store and decode
#  them. If you are really interested to find out about this, see
#  the following files in Python's source code:
#
#  methods r_long and r_PyLong in marshal.c
#  longintrepr.h, longobj.h and longobj.c, specifically the method long_from_bytes
#
# Author: Andre Berg
#
import marshal
import sys


def sysbits():
    if sys.maxsize &gt; 2**32:
        return 64
    else:
        return 32

def is_64bit():
    if sysbits() &gt; 32:
        return True
    else:
        return False
    
def is_32bit():
    if sysbits() &lt;= 32:
        return True
    else:
        return False

# Unfortunately Python 2.6 doesn't have sys.int_info yet 
# so we have to guess PyLong_SHIFT.

if is_64bit():
    PyLong_SHIFT = 30
    SIZEOF_LONG = 8
else:
    PyLong_SHIFT = 15
    SIZEOF_LONG = 4
PyLong_BASE = (1 &lt;&lt; PyLong_SHIFT)
PyLong_MASK = (PyLong_BASE - 1)
PyLong_MARSHAL_SHIFT = 15
PyLong_MARSHAL_BASE = (1 &lt;&lt; PyLong_MARSHAL_SHIFT)
PyLong_MARSHAL_MASK = (PyLong_MARSHAL_BASE - 1)
PyLong_MARSHAL_RATIO = round(PyLong_SHIFT // PyLong_MARSHAL_SHIFT)


def r_long(b):
    x = b[0]
    x |= b[1] &lt;&lt; 8
    x |= b[2] &lt;&lt; 16
    x |= b[3] &lt;&lt; 24
    if SIZEOF_LONG &gt; 4:
        # Sign extension for 64-bit machines
        x |= -(x &amp; 0x80000000)
    return x


def parseByteRange(element, byteView, bitPos, bitLength, results):
    # this method parses data starting at bitPos, bitLength bits are remaining
    &quot;&quot;&quot;parseByteRange method&quot;&quot;&quot;
	
    tsBytes = []
    bv = byteView

    # need to read the whole marshal structure incl 0x6C indicating type 'l'ong and 4 size bytes
    type_mask = '\x6C'
    size_mask = '\x00\x00\x00\x00'
    offset = len(type_mask) + len(size_mask)
    
    if sys.byteorder == 'little':
        endianess = ENDIAN_LITTLE
    else:
        endianess = ENDIAN_BIG

    start = ((bitPos//8) - offset)
    size = abs(int(byteView.readSignedInt(int(start + 1), 4, endianess)))

    if PyLong_MARSHAL_SHIFT == 30:
        size &lt;&lt;= 2
    else:
        size &lt;&lt;= 1

    for i in range(0, size + offset):
        tsBytes.append(byteView.readByte(int(start + i)))
    
    tsBytesStr = &quot;&quot;
    for b in tsBytes:
        tsBytesStr += chr(b)

    # create and set new value
    value = Value()
    value.setString(str(marshal.loads(tsBytesStr)))

    # how many bytes were processed?
    processedBytes = size
    iteration = 0

    results.addElement(element, processedBytes, iteration, value)

    # return number of processed bytes
    return processedBytes

def fillByteRange(value, byteArray, bitPos, bitLength):
    # this method translates edited values back to the file
    &quot;&quot;&quot;fillByteRange method&quot;&quot;&quot;

    # write an integer back to file
    # byteArray.writeUnsignedIntBits(highWord, bitPos, bitLength, ENDIAN_BIG)
    
    # Note: although it would be somewhat trivial to write this method 
    # using Python's marshal.dumps() method, one would also have to check
    # that the integer entered actually converts to a type 6C ('l') bytearray
    # because otherwise the length of the file would change. The difficulty is that
    # different Python versions handle integer size and limits differently.
    # 
    # The implementation below only applies the change if the length of the file
    # wouldn't change.
    # 
    offset = len('\x6C\x00\x00\x00\x00')
    start = ((bitPos//8) - offset)
    editedString = value.getString()
    try:
        newBytes = marshal.dumps(long(editedString))
    except ValueError:
        return
    valuePortion = newBytes[offset:]
    if newBytes[0] == '\x6C' and len(valuePortion) == (bitLength/8):
        byteArray.fillRange(start, len(newBytes), newBytes)

</source>
            </script>
        </scripts>
        <structure name="defaults" id="314" encoding="UTF-8" endian="little" signed="no"/>
        <structure name="Python Bytecode" id="313" extends="id:314">
            <scriptelement name="DetermineBytecodeVersion" id="316">
                <script name="unnamed" type="Generic">
                    <source language="Lua">function log(msg)
    logSrc = currentMapper:getCurrentLogSrc()
    logSrc:logMessage(&quot;PYT&quot;, 111, synalysis.SEVERITY_INFO, tostring(msg))
end

function getPycVersion()
    bv = currentMapper:getCurrentByteView()
    byteAtOffsetEight = bv:readByte(8)
    --log(byteAtOffsetEight)
    if byteAtOffsetEight == 0x63 then
        byteAtOffsetTwenty = bv:readByte(25)
        --log(byteAtOffsetTwenty)
        if byteAtOffsetTwenty == 0x73 then
            return 20
        else
            return 30
        end
    else
        return 33
    end
end

function pycVersionAsString()
    n = getPycVersion()
    if n &gt;= 33 then
        return &quot;Version 3.3&quot;
    elseif n == 30 then
        return &quot;Version 3.0&quot;
    else
        return &quot;Version 2.0&quot;
    end
end

function resultAsString(r)
    if r == nil then
        return &quot;nil&quot;
    elseif r.getName ~= nil then
        return tostring(r:getName())
    else
        return &quot;Unknown&quot;
    end
end


currentGrammar = currentMapper:getCurrentGrammar()
results = currentMapper:getCurrentResults()
byteArray = currentMapper:getCurrentByteArray()
byteView = currentMapper:getCurrentByteView()
fileLength = byteView:getLength()

lastResult = results:getLastResult()

marshalDataResult = results:getResultByName(&quot;Marshal data&quot;)
flagsResult = results:getResultByName(&quot;flags&quot;)
topLevelResult = results:getResultByName(&quot;Python Bytecode&quot;)
prevResult = results:getPrevResult(lastResult)


pycVersion = getPycVersion()
pycVersionStr = pycVersionAsString()

--log(&quot;Bytecode &quot; .. pycVersionStr)

version2Structure = currentGrammar:getStructureByName(&quot;Version 2&quot;)
version30Structure = currentGrammar:getStructureByName(&quot;Version 3.0&quot;)
version33Structure = currentGrammar:getStructureByName(&quot;Version 3.3&quot;)


whichStructure = nil
if (pycVersion == 20) then
    whichStructure = version2Structure
elseif (pycVersion == 30) then
    whichStructure = version30Structure
else
    whichStructure = version33Structure
end

bytesProcessed = currentMapper:mapStructureAtPosition(whichStructure, 0, fileLength)</source>
                </script>
            </scriptelement>
        </structure>
        <structure name="Version 2" id="318" repeatmin="0" extends="id:314">
            <structref name="Header" id="320" structure="id:319"/>
            <structure name="Marshal data" id="321" length="0" order="variable">
                <structref name="Element" id="323" repeatmax="-1" structure="id:322"/>
            </structure>
        </structure>
        <structure name="Version 3.0" id="326" repeatmin="0" extends="id:314">
            <structref name="Header" id="328" structure="id:319"/>
            <structure name="Marshal data" id="329" length="0" alignment="0" order="variable">
                <structref name="Element" id="331" repeatmax="-1" structure="id:330"/>
            </structure>
        </structure>
        <structure name="Version 3.3" id="334" repeatmin="0" extends="id:314">
            <structref name="Header" id="336" structure="id:335"/>
            <structure name="Marshal data" id="337" length="0" alignment="0" order="variable">
                <structref name="Element" id="338" repeatmax="-1" structure="id:330"/>
            </structure>
        </structure>
        <structure name="Header (Python 2)" id="319" length="8" repeatmin="0" extends="id:314">
            <number name="Magic Number" id="341" fillcolor="F72D17" type="integer" length="2"/>
            <binary name="CRLF" id="342" fillcolor="F9AF2D" length="2"/>
            <custom name="Timestamp" id="343" fillcolor="26FFFF" length="4" script="id:43"/>
        </structure>
        <structure name="Header (Python 3.3)" id="335" length="12" repeatmin="0" extends="id:314">
            <number name="Magic Number" id="349" fillcolor="F72D17" type="integer" length="2"/>
            <binary name="CRLF" id="350" fillcolor="F9AF2D" length="2"/>
            <custom name="Timestamp" id="351" fillcolor="26FFFF" length="4" script="id:43"/>
            <number name="Size" id="352" fillcolor="0FD8FF" type="integer" length="4"/>
        </structure>
        <structure name="Code (Python 2)" id="354" repeatmin="0" extends="id:314">
            <binary name="type" mustmatch="yes" id="355" fillcolor="007FFF" length="1">
                <fixedvalues>
                    <fixedvalue name="Code" value="63"/>
                </fixedvalues>
            </binary>
            <number name="argcount" id="356" fillcolor="BF0C86" type="integer" length="4"/>
            <number name="nlocals" id="357" fillcolor="BF581D" type="integer" length="4"/>
            <number name="stacksize" id="358" fillcolor="FF7600" type="integer" length="4"/>
            <binary name="flags" id="359" fillcolor="F9AF2D" length="4"/>
            <structref name="code" id="361" structure="id:360"/>
            <structref name="consts" id="363" structure="id:362"/>
            <structref name="names" id="364" structure="id:362"/>
            <structref name="varnames" id="365" structure="id:362"/>
            <structref name="freevars" id="366" structure="id:362"/>
            <structref name="cellvars" id="367" structure="id:362"/>
            <structref name="filename" id="368" structure="id:360"/>
            <structref name="name" id="369" structure="id:360"/>
            <number name="firstlineno" id="370" fillcolor="FB82D7" type="integer" length="4"/>
            <structref name="lnotab" id="371" structure="id:360"/>
        </structure>
        <structure name="Code (Python 3)" id="373" repeatmin="0" extends="id:314">
            <binary name="type" mustmatch="yes" id="374" fillcolor="007FFF" length="1">
                <fixedvalues>
                    <fixedvalue name="Code" value="63"/>
                </fixedvalues>
            </binary>
            <number name="argcount" id="375" fillcolor="BF0C86" type="integer" length="4"/>
            <number name="nlocals" id="376" fillcolor="BF581D" type="integer" length="4"/>
            <number name="stacksize" id="377" fillcolor="FF7600" type="integer" length="4"/>
            <binary name="flags" id="378" fillcolor="F9AF2D" length="8"/>
            <structref name="code" id="379" structure="id:360"/>
            <structref name="consts" id="381" structure="id:380"/>
            <structref name="names" id="382" structure="id:380"/>
            <structref name="varnames" id="383" structure="id:380"/>
            <structref name="freevars" id="384" structure="id:380"/>
            <structref name="cellvars" id="385" structure="id:380"/>
            <structref name="filename" id="386" structure="id:360"/>
            <structref name="name" id="387" structure="id:360"/>
            <number name="firstlineno" id="388" fillcolor="FB82D7" type="integer" length="4"/>
            <structref name="lnotab" id="389" structure="id:360"/>
        </structure>
        <structure name="String" id="391" repeatmin="0" extends="id:314">
            <binary name="type" mustmatch="yes" id="392" fillcolor="007FFF" length="1">
                <fixedvalues>
                    <fixedvalue name="String" value="73"/>
                    <fixedvalue name="Unicode" value="75"/>
                    <fixedvalue name="InternedString" value="74"/>
                </fixedvalues>
            </binary>
            <number name="length" id="393" fillcolor="38EC0D" type="integer" length="4"/>
            <string name="data" id="394" fillcolor="00B80B" repeatmin="0" type="fixed-length" length="length"/>
        </structure>
        <structure name="Type" id="396" disabled="yes" extends="id:314">
            <binary name="type" id="397" disabled="yes" fillcolor="007FFF" length="1">
                <fixedvalues>
                    <fixedvalue name="Ellipsis" value="2E"/>
                    <fixedvalue name="Null" value="30"/>
                    <fixedvalue name="None" value="4E"/>
                    <fixedvalue name="True" value="54"/>
                    <fixedvalue name="False" value="46"/>
                    <fixedvalue name="Code" value="63"/>
                    <fixedvalue name="Float" value="66"/>
                    <fixedvalue name="Binary Float" value="67"/>
                    <fixedvalue name="Int" value="69"/>
                    <fixedvalue name="Int64" value="49"/>
                    <fixedvalue name="Long" value="6C"/>
                    <fixedvalue name="String Ref" value="52"/>
                    <fixedvalue name="String" value="73"/>
                    <fixedvalue name="StopIteration" value="53"/>
                    <fixedvalue name="Interned String" value="74"/>
                    <fixedvalue name="Unicode" value="75"/>
                    <fixedvalue name="Complex" value="78"/>
                    <fixedvalue name="Binary Complex" value="79"/>
                    <fixedvalue name="Tuple" value="28"/>
                    <fixedvalue name="List" value="5B"/>
                    <fixedvalue name="Dict" value="7B"/>
                    <fixedvalue name="Set" value="3C"/>
                    <fixedvalue name="Frozenset" value="3E"/>
                    <fixedvalue name="Unknown" value="3F"/>
                </fixedvalues>
            </binary>
        </structure>
        <structure name="TupleLikes (Python 2)" id="362" repeatmin="0" extends="id:314">
            <binary name="type" mustmatch="yes" id="399" fillcolor="007FFF" length="1">
                <fixedvalues>
                    <fixedvalue name="Tuple" value="28"/>
                    <fixedvalue name="List" value="5B"/>
                    <fixedvalue name="Set" value="3C"/>
                    <fixedvalue name="Frozenset" value="3E"/>
                </fixedvalues>
            </binary>
            <number name="length" id="400" fillcolor="8503C2" type="integer" length="4"/>
            <structref name="element" id="401" repeatmax="length" structure="id:322"/>
        </structure>
        <structure name="TupleLikes (Python 3)" id="380" repeatmin="0" extends="id:314">
            <binary name="type" mustmatch="yes" id="403" fillcolor="007FFF" length="1">
                <fixedvalues>
                    <fixedvalue name="Tuple" value="28"/>
                    <fixedvalue name="List" value="5B"/>
                    <fixedvalue name="Set" value="3C"/>
                    <fixedvalue name="Frozenset" value="3E"/>
                </fixedvalues>
            </binary>
            <number name="length" id="404" fillcolor="8503C2" type="integer" length="4"/>
            <structref name="element" id="405" repeatmax="length" structure="id:330"/>
        </structure>
        <structure name="Int" id="407" repeatmin="0" extends="id:314">
            <binary name="type" mustmatch="yes" id="408" fillcolor="007FFF" length="1">
                <fixedvalues>
                    <fixedvalue name="Int" value="69"/>
                </fixedvalues>
            </binary>
            <number name="value" id="409" fillcolor="DC0713" type="integer" length="4" signed="yes"/>
        </structure>
        <structure name="Int64" id="411" repeatmin="0" extends="id:314">
            <binary name="type" mustmatch="yes" id="412" fillcolor="007FFF" length="1">
                <fixedvalues>
                    <fixedvalue name="Int64" value="49"/>
                </fixedvalues>
            </binary>
            <number name="value" id="413" fillcolor="DC0713" type="integer" length="8" signed="yes"/>
        </structure>
        <structure name="None" id="415" repeatmin="0" extends="id:314">
            <binary name="type" mustmatch="yes" id="416" fillcolor="007FFF" length="1">
                <fixedvalues>
                    <fixedvalue name="None" value="4E"/>
                </fixedvalues>
            </binary>
        </structure>
        <structure name="Float" id="418" repeatmin="0" extends="id:314">
            <binary name="type" mustmatch="yes" id="419" fillcolor="007FFF" length="1">
                <fixedvalues>
                    <fixedvalue name="Float" value="66"/>
                </fixedvalues>
            </binary>
            <number name="length" id="420" fillcolor="BCBCDE" type="integer" length="1"/>
            <string name="value" id="421" fillcolor="8177FC" type="fixed-length" length="length"/>
        </structure>
        <structure name="BinaryFloat" id="423" repeatmin="0" extends="id:314">
            <binary name="type" mustmatch="yes" id="424" fillcolor="007FFF" length="1">
                <fixedvalues>
                    <fixedvalue name="BinaryFloat" value="67"/>
                </fixedvalues>
            </binary>
            <number name="value" id="425" fillcolor="F80492" type="float" length="64" lengthunit="bit"/>
        </structure>
        <structure name="Complex" id="427" repeatmin="0" extends="id:314">
            <binary name="type" mustmatch="yes" id="428" fillcolor="007FFF" length="1">
                <fixedvalues>
                    <fixedvalue name="Complex" value="78"/>
                </fixedvalues>
            </binary>
            <structref name="real" id="429" fillcolor="916C40" structure="id:418"/>
            <structref name="imag" id="430" fillcolor="CBBBA1" structure="id:418"/>
        </structure>
        <structure name="BinaryComplex" id="432" repeatmin="0" extends="id:314">
            <binary name="type" mustmatch="yes" id="433" fillcolor="007FFF" length="1">
                <fixedvalues>
                    <fixedvalue name="BinaryComplex" value="79"/>
                </fixedvalues>
            </binary>
            <structref name="real" id="434" fillcolor="916C44" structure="id:423"/>
            <structref name="imag" id="435" fillcolor="CBBBA1" structure="id:423"/>
        </structure>
        <structure name="Dict (Python 2)" id="437" repeatmin="0" extends="id:314">
            <binary name="type" mustmatch="yes" id="438" fillcolor="007FFF" length="1">
                <fixedvalues>
                    <fixedvalue name="Dict" value="7B"/>
                </fixedvalues>
            </binary>
            <structref name="element" id="439" fillcolor="FDACFD" repeatmax="-1" structure="id:322"/>
            <binary name="terminator" mustmatch="yes" id="440" fillcolor="F942A9" length="1">
                <fixedvalues>
                    <fixedvalue name="Null" value="30"/>
                </fixedvalues>
            </binary>
        </structure>
        <structure name="Dict (Python 3)" id="442" repeatmin="0" extends="id:314">
            <binary name="type" mustmatch="yes" id="443" fillcolor="007FFF" length="1">
                <fixedvalues>
                    <fixedvalue name="Dict" value="7B"/>
                </fixedvalues>
            </binary>
            <structref name="element" id="444" fillcolor="FDACFD" repeatmax="-1" structure="id:330"/>
            <binary name="terminator" mustmatch="yes" id="445" fillcolor="F942A9" length="1">
                <fixedvalues>
                    <fixedvalue name="Null" value="30"/>
                </fixedvalues>
            </binary>
        </structure>
        <structure name="StringRef" id="447" repeatmin="0" extends="id:314">
            <binary name="type" mustmatch="yes" id="448" fillcolor="F9DD25" length="1">
                <fixedvalues>
                    <fixedvalue name="StringRef" value="52"/>
                </fixedvalues>
            </binary>
            <number name="index" id="449" fillcolor="F9B931" type="integer" length="4"/>
        </structure>
        <structure name="Element (Python 2)" id="322" repeatmin="0" extends="id:314" order="variable">
            <structref name="Int" id="451" repeatmin="0" structure="id:407"/>
            <structref name="Int64" id="452" repeatmin="0" structure="id:411"/>
            <structref name="Tuple" id="453" repeatmin="0" structure="id:362"/>
            <structref name="Float" id="454" repeatmin="0" structure="id:418"/>
            <structref name="BinaryFloat" id="455" repeatmin="0" structure="id:423"/>
            <structref name="Complex" id="456" repeatmin="0" structure="id:427"/>
            <structref name="BinaryComplex" id="457" repeatmin="0" structure="id:432"/>
            <structref name="Null" id="459" repeatmin="0" structure="id:458"/>
            <structref name="StopIteration" id="461" repeatmin="0" structure="id:460"/>
            <structref name="Unknown" id="463" repeatmin="0" structure="id:462"/>
            <structref name="Ellipsis" id="465" repeatmin="0" structure="id:464"/>
            <structref name="Boolean" id="467" repeatmin="0" structure="id:466"/>
            <structref name="Dict" id="468" repeatmin="0" structure="id:437"/>
            <structref name="Code" id="469" repeatmin="0" structure="id:354"/>
            <structref name="StringLikes" id="470" repeatmin="0" structure="id:360"/>
            <structref name="String" id="471" repeatmin="0" structure="id:391"/>
            <structref name="StringRef" id="472" repeatmin="0" structure="id:447"/>
            <structref name="LongObject" id="474" repeatmin="0" structure="id:473"/>
            <structref name="None" id="475" repeatmin="0" structure="id:415"/>
        </structure>
        <structure name="Element (Python 3)" id="330" repeatmin="0" extends="id:314" order="variable">
            <structref name="Int" id="477" repeatmin="0" structure="id:407"/>
            <structref name="Int64" id="478" repeatmin="0" structure="id:411"/>
            <structref name="None" id="479" repeatmin="0" structure="id:415"/>
            <structref name="Tuple" id="480" repeatmin="0" structure="id:380"/>
            <structref name="Float" id="481" repeatmin="0" structure="id:418"/>
            <structref name="BinaryFloat" id="482" repeatmin="0" structure="id:423"/>
            <structref name="Complex" id="483" repeatmin="0" structure="id:427"/>
            <structref name="BinaryComplex" id="484" repeatmin="0" structure="id:432"/>
            <structref name="Null" id="485" repeatmin="0" structure="id:458"/>
            <structref name="StopIteration" id="486" repeatmin="0" structure="id:460"/>
            <structref name="Unknown" id="487" repeatmin="0" structure="id:462"/>
            <structref name="Ellipsis" id="488" repeatmin="0" structure="id:464"/>
            <structref name="Boolean" id="489" repeatmin="0" structure="id:466"/>
            <structref name="Dict" id="490" repeatmin="0" structure="id:442"/>
            <structref name="Code" id="491" repeatmin="0" structure="id:373"/>
            <structref name="StringLikes" id="492" repeatmin="0" structure="id:360"/>
            <structref name="String" id="493" repeatmin="0" structure="id:391"/>
            <structref name="StringRef" id="494" repeatmin="0" structure="id:447"/>
            <structref name="LongObject" id="495" repeatmin="0" structure="id:473"/>
        </structure>
        <structure name="Null" id="458" repeatmin="0" extends="id:314">
            <binary name="type" mustmatch="yes" id="497" fillcolor="AEAEAE" length="1">
                <fixedvalues>
                    <fixedvalue name="Null" value="30"/>
                </fixedvalues>
            </binary>
        </structure>
        <structure name="StopIteration" id="460" repeatmin="0" extends="id:314">
            <binary name="type" mustmatch="yes" id="499" fillcolor="999999" length="1">
                <fixedvalues>
                    <fixedvalue name="StopIteration" value="53"/>
                </fixedvalues>
            </binary>
        </structure>
        <structure name="Unknown" id="462" repeatmin="0" extends="id:314">
            <binary name="Type" mustmatch="yes" id="501" fillcolor="F98A8B" length="1">
                <fixedvalues>
                    <fixedvalue name="Unknown" value="3F"/>
                </fixedvalues>
            </binary>
        </structure>
        <structure name="Ellipsis" id="464" repeatmin="0" extends="id:314">
            <binary name="type" mustmatch="yes" id="503" fillcolor="B0B4B9" length="4">
                <fixedvalues>
                    <fixedvalue name="Ellipsis" value="2E"/>
                </fixedvalues>
            </binary>
        </structure>
        <structure name="Boolean" id="466" repeatmin="0" extends="id:314">
            <binary name="type" mustmatch="yes" id="505" fillcolor="A50079" length="1">
                <fixedvalues>
                    <fixedvalue name="True" value="54"/>
                    <fixedvalue name="False" value="46"/>
                </fixedvalues>
            </binary>
        </structure>
        <structure name="TruncatedString" id="507" repeatmin="0" extends="id:314">
            <binary name="type" mustmatch="yes" id="508" fillcolor="007FFF" length="1">
                <fixedvalues>
                    <fixedvalue name="String" value="73"/>
                    <fixedvalue name="InternedString" value="74"/>
                    <fixedvalue name="Unicode" value="75"/>
                </fixedvalues>
            </binary>
            <number name="length" id="509" fillcolor="35CA25" type="integer" length="4"/>
            <string name="data" id="510" fillcolor="52920F" type="fixed-length" length="length - 1"/>
        </structure>
        <structure name="StringLikes" id="360" repeatmin="0" extends="id:314" order="variable">
            <structref name="StringRef" id="512" repeatmin="0" structure="id:447"/>
            <structref name="String" id="513" repeatmin="0" structure="id:391"/>
        </structure>
        <structure name="LongObject" id="473" repeatmin="0" extends="id:314">
            <binary name="type" mustmatch="yes" id="515" fillcolor="007FFF" length="1">
                <fixedvalues>
                    <fixedvalue name="LongObject" value="6C"/>
                </fixedvalues>
            </binary>
            <number name="size" id="516" fillcolor="D58F3D" type="integer" length="4" signed="yes"/>
            <custom name="value" id="517" fillcolor="BF581D" length="remaining" script="id:528"/>
        </structure>
    </grammar>
</ufwb>
